import pickle
import random
import heapq
#Cluster of 1000 documents, cluster size=28
#clusters
#cmax=[0.15440715179600989, 0.15681430359201967, 0.17722145538802947, 0.27762860718403931, 0.30003575898004914, 0.30144291077605889, 0.30785006257206871, 0.31525721436807846, 0.32166436616408828, 0.32707151796009803, 0.32947866975610779, 0.33188582155211754, 0.34329297334812731, 0.36970012514413708, 0.39610727694014686, 0.42251442873615663, 0.44892158053216641, 0.47532873232817618, 0.50173588412418602, 0.52814303592019585]
#label_array=[20, 20, 20, 14, 4, 16, 13, 1, 19, 15, 18, 20, 8, 5, 2, 17, 6, 10, 9, 3, 12, 7, 11, 20, 20, 18, 20, 16]

cmax=[0.018301693983736923, 0.036603387967473845, 0.054905081951210771, 0.07320677593494769, 0.09150846991868461, 0.10981016390242153, 0.12811185788615845, 0.14641355186989538, 0.16471524585363231, 0.18301693983736925, 0.20131863382110618, 1.2196203278048197, 0.23792202178858005, 0.25622371577231695, 0.27452540975605388, 0.29282710373979082, 0.31112879772352775, 0.32943049170726468, 0.34773218569100162, 0.36603387967473855]
label_array=[11, 11, 12, 6, 9, 10, 8, 10, 9, 7, 10, 9, 9, 7, 10, 11, 7, 10, 6, 8, 11, 5, 8, 6, 8, 7, 2, 10, 10, 3, 4, 8, 7, 1, 4]
pairwise_dist_mat=numpy.load('pmatrix_1000_vocab_250.dat.npy')
clusters=[[15, 21, 35, 39, 49, 57, 90, 93, 98, 128, 129, 159, 166, 189, 190, 201, 225, 228, 264, 279, 295, 307, 314, 318, 359, 390, 392, 394, 397, 426, 430, 434, 440, 454, 460, 461, 463, 479, 488, 532, 541, 545, 561, 570, 576, 579, 587, 604, 633, 641, 647, 674, 675, 676, 685, 695, 696, 712, 720, 728, 735, 791, 805, 808, 835, 837, 859, 862, 874, 875, 893, 900, 909, 921, 924, 954, 957, 969, 981], [27, 53, 70, 77, 157, 179, 199, 266, 308, 324, 499, 518, 580, 595, 748, 786, 799, 834, 953], [17, 30, 60, 100, 293, 351, 422, 509, 514, 530, 645, 693, 708, 878, 916, 926, 980], [59, 150, 162, 400, 511, 548, 609, 615, 671, 773, 787, 806, 864], [202, 212, 271, 309, 411, 428, 458, 493, 558, 600, 614, 638, 777, 811, 844, 857, 915, 935, 994], [32, 56, 88, 174, 248, 250, 259, 302, 322, 425, 492, 540, 549, 583, 665, 711, 763, 848, 891, 908, 961, 970], [116, 121, 151, 227, 331, 358, 405, 413, 427, 473, 477, 546, 640, 683, 704, 706, 722, 746, 772, 781, 887, 934], [69, 72, 86, 89, 95, 104, 125, 155, 200, 205, 223, 226, 262, 384, 435, 438, 491, 519, 535, 537, 591, 631, 653, 684, 686, 687, 713, 723, 730, 793, 849, 860, 884, 914, 925, 928, 949, 952, 972, 973, 977], [185, 210, 211, 229, 240, 292, 344, 379, 414, 448, 475, 500, 521, 596, 599, 642, 649, 673, 725, 726, 729, 780, 902, 943], [6, 20, 22, 52, 224, 230, 234, 241, 267, 283, 284, 452, 536, 556, 594, 626, 663, 705, 747, 766, 790], [38, 42, 85, 103, 106, 152, 207, 220, 300, 313, 333, 339, 386, 401, 437, 571, 603, 629, 736, 744, 756, 757, 794, 803, 870, 910, 956, 984, 988], [13, 14, 44, 47, 99, 108, 131, 134, 167, 204, 222, 247, 256, 261, 268, 325, 375, 416, 439, 445, 462, 467, 526, 528, 542, 555, 577, 624, 656, 670, 710, 739, 745, 749, 778, 795, 796, 802, 841, 869, 871, 880, 894, 933, 939, 944, 982, 990], [16, 101, 112, 124, 183, 203, 216, 217, 277, 291, 341, 353, 404, 424, 432, 447, 494, 533, 559, 589, 658, 661, 666, 738, 770, 792, 801, 804, 813, 898, 922, 931, 998, 999], [186, 242, 265, 366, 504, 517, 554, 621, 826, 828, 863, 938, 967], [2, 64, 132, 141, 177, 191, 274, 369, 433, 436, 476, 482, 486, 515, 531, 612, 648, 697, 816, 829, 847, 873, 899, 950], [3, 9, 18, 63, 84, 91, 115, 137, 146, 147, 169, 188, 208, 214, 219, 243, 254, 260, 281, 286, 310, 327, 336, 364, 372, 376, 380, 393, 402, 406, 410, 423, 429, 455, 483, 544, 593, 616, 620, 625, 632, 635, 637, 643, 655, 659, 672, 688, 692, 694, 707, 709, 715, 719, 727, 732, 751, 753, 767, 768, 775, 776, 782, 810, 812, 821, 842, 845, 868, 882, 905, 912, 932, 941, 947, 971], [34, 87, 102, 105, 133, 145, 209, 315, 330, 349, 373, 385, 449, 450, 502, 506, 547, 552, 569, 572, 601, 606, 617, 699, 815, 823, 839, 840, 861, 890, 964, 987, 993], [26, 28, 46, 51, 74, 75, 76, 135, 221, 231, 235, 236, 278, 355, 356, 371, 395, 472, 525, 529, 588, 605, 630, 650, 690, 737, 750, 807, 825, 858, 867, 888, 927], [62, 198, 239, 257, 337, 354, 474, 562, 765, 774, 797, 886, 985], [24, 136, 163, 270, 273, 294, 296, 297, 299, 301, 387, 415, 534, 585, 613, 634, 680, 721, 733, 783, 809, 817, 892, 920, 958], [25, 29, 33, 54, 67, 148, 172, 178, 195, 213, 246, 258, 272, 352, 378, 498, 524, 574, 607, 664, 668, 752, 755, 818, 896, 937, 951, 965, 992], [5, 94, 138, 165, 176, 197, 303, 312, 316, 334, 417, 431, 443, 457, 490, 543, 565, 652, 716, 814, 833, 872, 936, 979, 995], [41, 110, 127, 311, 321, 329, 361, 442, 469, 485, 689, 734, 876, 881, 930], [10, 12, 43, 78, 92, 182, 289, 317, 374, 418, 503, 619, 771, 820, 846], [37, 48, 269, 305, 557, 578, 654, 779, 850, 923, 962], [61, 142, 153, 253, 285, 298, 346, 391, 408, 444, 505, 527, 566, 611, 691, 831, 838, 877], [111, 154, 158, 168, 184, 206, 306, 342, 496, 513, 551, 581, 627, 830, 856, 978, 996], [31, 55, 58, 68, 80, 114, 117, 118, 126, 170, 215, 232, 263, 282, 328, 335, 381, 398, 403, 407, 419, 446, 453, 470, 487, 507, 512, 598, 602, 610, 622, 651, 660, 662, 718, 743, 832, 885, 897, 904, 917, 919, 959, 963, 966, 986], [23, 50, 73, 122, 187, 249, 255, 275, 280, 320, 338, 343, 350, 363, 368, 399, 456, 465, 510, 523, 539, 560, 573, 644, 677, 764, 785, 788, 789, 800, 819, 843, 889, 901, 913, 942, 948], [7, 8, 130, 139, 156, 164, 194, 196, 276, 288, 466, 480, 501, 563, 582, 623, 667, 681, 700, 714, 717, 741, 855, 907, 975], [19, 36, 65, 79, 83, 119, 120, 149, 161, 175, 238, 290, 412, 441, 451, 459, 481, 495, 497, 522, 567, 575, 590, 636, 657, 759, 761, 798, 836, 911, 955, 983, 991], [40, 66, 71, 319, 348, 389, 484, 520, 628, 679, 682, 701, 724, 731, 740, 895, 940, 989, 997], [11, 107, 140, 144, 193, 237, 287, 360, 388, 409, 489, 586, 754, 822, 827, 903, 960], [4, 81, 109, 171, 192, 233, 251, 252, 323, 347, 357, 377, 508, 564, 584, 608, 703, 760, 769, 883, 929, 946], [758, 82, 332, 173, 742, 180, 618, 181, 553, 96, 396, 45, 538, 866, 702, 370, 974, 879, 365, 0, 854, 976, 420, 698, 678, 218, 304, 478, 906, 340, 468, 345, 244, 639, 516, 550, 123, 383, 326, 362, 646, 851, 597, 97, 669, 945, 245, 421, 471, 852, 968, 762, 784, 1, 113, 853, 143, 592, 865, 367, 382, 160, 568, 824, 464, 918]]
num_groups=12
groups=[[] for i in range(num_groups)]
for i in range(len(clusters)):
	groups[label_array[i]-1]+=clusters[i]
	
pivot=[0 for i in range(num_groups)]
for i in range(num_groups):
	pivot[i]=random.choice(groups[i])

pivot_dist=[[] for i in range(num_groups)]	
for i in range(num_groups):
	for j in groups[i]:
		dist=pairwise_dist_mat[j,pivot[i]]
		pivot_dist[i].append(dist)
	
	
num_query=1
query_array=random.sample(range(1000),num_query)
prune_count=0	
query=query_array[0]
#initialize the top_k elements
top_k=[]
for i in range(10):
		
		dist=pairwise_dist_mat[query,groups[random.randint(0,num_groups-1)][i]]	
		heapq.heappush(top_k,-dist)


prune_count=0	
for cnt in range(num_query):
	query=query_array[cnt]
	top_k=[]
	for i in range(10):	
		dist=pairwise_dist_mat[query,groups[random.randint(0,num_groups-1)][i]]	
		heapq.heappush(top_k,-dist)		
	temp= [i for i in range(num_groups)]
	random.shuffle(temp)
	max_dist=-1*heapq.heappop(top_k)
	for i in temp:
		for j in range(len(groups[i])):
			if abs(pairwise_dist_mat[query,pivot[i]]-pivot_dist[i][j])-cmax[i]>max_dist:
				prune_count+=1
			else:
				dist=pairwise_dist_mat[query,groups[i][j]]
				if dist<max_dist:
					heapq.heappush(top_k,-dist)	
					max_dist=-1*heapq.heappop(top_k)

print prune_count/(1.0*num_query)

###########################################
top_k=list(prev_top_k)
prune_count=0
for cnt in range(num_query):
	query=query_array[cnt]
	top_k=[]
	for i in range(10):	
		dist=pairwise_dist_mat[query,groups[random.randint(0,num_groups-1)][i]]	
		heapq.heappush(top_k,-dist)	
		
	temp= [i for i in range(num_groups)]
	temp.reverse()
	max_dist=-1*heapq.heappop(top_k)
	for i in temp:
		for j in range(len(groups[i])):
			if abs(pairwise_dist_mat[query,pivot[i]]-pivot_dist[i][j])-cmax[i]>max_dist:
				prune_count+=1
			else:
				dist=pairwise_dist_mat[query,groups[i][j]]
				if dist<max_dist:
					heapq.heappush(top_k,-dist)	
					max_dist=-1*heapq.heappop(top_k)

#print prune_count/(num_query*1.0)

#best of 7 prunes 